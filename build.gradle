import com.sarhanm.versioner.VersionerOptions

// Apply versioner first so we set the version number correctly
// in case another plugin doesn't wait until the project is evaluated before execution.
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
        classpath 'com.sarhanm:gradle-versioner:1.0.81.master.efbb95a'
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.0"
    }
}

project.extensions.create("versioner", VersionerOptions)
versioner{
    //Community Plugins are required to have a clean version string.
    omitBranchMetadataOnSolidBranch=true
}

apply plugin: 'com.sarhanm.versioner'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'


group = 'com.sarhanm'

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'org.yaml:snakeyaml:1.14'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
}

apply plugin: 'com.jfrog.bintray'

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task groovydocJar( type: Jar ) {
    classifier 'javadoc'
    from groovydoc
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact groovydocJar
        }
    }
}

bintray {
    user = 'sarhanm'
    key = System.env.BINTRAYTOKEN
    publications = ['mavenJava']
    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = 'gradle-versioner'
        desc = 'A gradle plugin to set the project version based on git metadata'
        websiteUrl = 'https://github.com/sarhanm/gradle-versioner'
        issueTrackerUrl = 'https://github.com/sarhanm/gradle-versioner/issues'
        vcsUrl = 'https://github.com/sarhanm/gradle-versioner.git'
        licenses = ['MIT']
        labels = ['gradle', 'git', 'versioning', 'auto version']
        publicDownloadNumbers = true
        version {
            name = project.version
            attributes = ['gradle-plugin': ['com.sarhanm.versioner:com.sarhanm:gradle-versioner','com.sarhanm.version-resolver:com.sarhanm:gradle-versioner'] ]
        }
    }
}

ext['gradle.publish.key'] = System.env.gradlePublishKey
ext['gradle.publish.secret'] = System.env.gradlePublishSecret

pluginBundle {
  website = 'https://github.com/sarhanm/gradle-versioner'
  vcsUrl = 'https://github.com/sarhanm/gradle-versioner'

  description = 'Set the project version based on git metadata and number of commits.'

  plugins {

    versionerPlugin {
      id = 'com.sarhanm.versioner'
      displayName = 'Gradle Project Version Set Plugin'
      description = 'Set the project version based on git metatdata and number of commits. Example: 1.0.81.master.efbb95a'
      tags = ['versioner', 'version', 'git', 'scm', 'commits', 'auto version', 'auto']
    }

    versionResolverPlugin {
      id = 'com.sarhanm.version-resolver'
      displayName = 'Version Resolver: Resolve Dependencies From Global Manifest'
      description = 'Allows you to resolve versions for all dependencies from a global manifest rather than hard coding versions in each build.gradle file'
      tags = ['versioner', 'version', 'resolve', 'yaml', 'manifest']
    }
  }
}

/**
 * Grabs the values from the env and writes to a file that can be used by the plugin-publish plugin.
 * This allows us define the API and secrete securely in travis-ci
 */
//task setupPluginUpload << {
//    def file = file("build/plugin-publish-keys.properties")
//    def key=System.env.gradlePublishKey
//    def secret = System.env.gradlePublishSecret
//
//    if( !key || !secret)
//    {
//        throw new RuntimeException("gradlePublishKey and/or gradlePublishSecret are not defined environment variables")
//    }
//
//    def props = new Properties()
//    props.setProperty("gradle.publish.key", key)
//    props.setProperty("gradle.publish.secret", secret)
//    props.store(file.newWriter(), "Generated for use with plugin-publish-plugin")
//    System.properties.setProperty("com.gradle.login.properties.file", file.absolutePath)
//}
//
//tasks.publishPlugins.dependsOn tasks.setupPluginUpload